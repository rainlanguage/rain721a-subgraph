type Vapour721AFactory @entity {
  id: ID!
  address: Bytes!
  children: [Vapour721A!]
  childrenCount: BigInt!
  implementation: Bytes!
}

type Vapour721A @entity {
  id: ID!
  deployer: Bytes!
  deployTimestamp: BigInt!
  deployBlockNumber: BigInt!
  name: String
  symbol: String
  supplyLimit: BigInt
  royaltyBPS: BigInt
  baseURI: String
  owner: Bytes
  recipient: Bytes
  vmStateConfig: StateConfig
  currency: Token
  nfts: [NFT!]
  amountPayable: BigInt!
  amountWithdrawn: BigInt!
  withdrawals: [Withdraw!]
  mintTransactionCount: BigInt!
  mintTransactions: [MintTransaction!]
}

type StateConfig @entity {
  id: ID!
  sources: [Bytes!]!
  constants: [BigInt!]!
  argumentsLength: BigInt!
  stackLength: BigInt!
}

type Holder @entity {
  id: ID!
  address: Bytes!
  nfts: [NFT!]
}

type NFT @entity {
  id: ID!
  tokenId: BigInt!
  owner: Bytes!
  tokenURI: String!
  contract: Bytes!
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  totalSupply: BigInt!
  decimals: Int!
}

type Withdraw @entity {
  id: ID!
  withdrawer: Bytes!
  amount: BigInt!
  timeStamp: BigInt!
}

type MintTransaction @entity {
  id: ID!
  hash: String!
  receiver: Bytes!
  units: BigInt!
  cost: BigInt!
  mintTimestamp: BigInt!
  mintBlockNumber: BigInt!
  nfts: [NFT!]
}

type RoleGranted implements Event @entity {
    id: ID!
    emitter: Bytes!
    transaction: String!
    timestamp: BigInt!
    contract: Bytes!
    role: Role!
    roleHolder: RoleHolder!
    account: Bytes!
    sender: Bytes!
}

type RoleRevoked implements Event @entity {
    id: ID!
    emitter: Bytes!
    transaction: String!
    timestamp: BigInt!
    contract: Bytes!
    role: Role!
    roleHolder: RoleHolder!
    account: Bytes!
    sender: Bytes!
}

type RoleHolder @entity {
    id: ID!
    contract: Bytes!
    role: Role!
    account: Bytes!
    hasRole: Boolean!
    roleGrants: [RoleGranted!]
    roleRevoked: [RoleRevoked!]
}
type Role @entity {
    id: ID!
    contract: Bytes!
    roleHash: Bytes!
    roleName: String! # match the hash to the roles in roles.sol
    roleHolders: [RoleHolder!]
}

interface Event {
    id: ID!
    transaction: String!
    emitter: Bytes!
    timestamp: BigInt!
}